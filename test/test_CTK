import customtkinter as ctk
import os
import json
from tkinter import *
from PIL import ImageTk, Image

app = ctk.CTk()
app.title("Main Menu")
app.geometry("640x980")
app.resizable(width = 0, height = 0)
ctk.set_appearance_mode("light")
ctk.set_default_color_theme("test/test_custom.json")

# declare the font for the app
bl36 = ctk.CTkFont(family = 'Bahnschrift light', size = 36)
bl20 = ctk.CTkFont(family = 'Bahnschrift light', size = 20)
bb72 = ctk.CTkFont(family = 'Bahnschrift SemiBold', size = 72)
pkm_unk_36 = ctk.CTkFont(family = 'Pokemon Unown GB', size = 36)

back = ctk.CTkImage(light_image = Image.open("img_asset/back.png"),
                    dark_image = Image.open("img_asset/back_dark.png"),
                    size = (58, 29))

setting_frame = None

# Global variable to store the theme setting
theme_setting = 'light'

def load_settings() -> dict:
    if not os.path.exists('./test/settings.json'):
        with open('./test/settings.json', 'w') as file:
            json.dump({'theme': 'system'}, file)

    with open('./test/settings.json') as file:
        return json.load(file)

def write_settings(settings: dict) -> None:
    with open('./test/settings.json', 'w') as file:
        json.dump(settings, file)

def set_theme(theme):
    global theme_setting  # Declare the variable as global
    theme_setting = theme
    ctk.set_appearance_mode(theme)
    write_settings({'theme': theme})

def open_setting():
    setting_button.pack_forget()
    name.pack_forget()
    logo_lable.pack_forget()
    scan_button.pack_forget()

    app.title("Settings")

    # Create a frame to hold the label and combobox
    setting_frame = ctk.CTkFrame(app)
    setting_frame.pack(pady=10)

    lang_label = ctk.CTkLabel(setting_frame, text='Color Theme')
    lang_label.pack()

    combobox1 = ctk.CTkComboBox(setting_frame, values=['system', 'dark', 'light'], command=lambda choice: set_theme(choice))
    combobox1.pack()

    back_button = ctk.CTkButton(setting_frame, image = back, text = "", command = close_setting)
    back_button.anchor("sw")
    back_button.pack()

def close_setting():

    global setting_frame

    if setting_frame:

        setting_frame.pack_forget()
        name.pack()
        logo_lable.pack()
        scan_button.pack()
        setting_button.pack()

setting_button = ctk.CTkButton(app, text = "n", command = open_setting)
setting_button.configure(width = 58, height = 58, font = pkm_unk_36)
setting_button.pack(anchor = "nw", padx = 0, pady = 0)

name = ctk.CTkLabel(app, text = "Blidenschrift", fg_color = "transparent", font = bb72)
name.anchor("center")
name.pack()

logo = ctk.CTkImage(light_image = Image.open("img_asset/blindenschrift.png"),
                              dark_image = Image.open("img_asset/invert_blindenschrift.png"),
                              size = (360, 360))

logo_lable = ctk.CTkLabel(app, image = logo, text = "")
logo_lable.anchor("center")
logo_lable.pack(padx = 0, pady = 50)

scan_button = ctk.CTkButton(app, text="SCAN")
scan_button.configure(font = bl36, width = 360, height = 60)
scan_button.anchor("center")
scan_button.pack(padx = 0, pady = 80)

# setting = ImageTk.PhotoImage(file='img_asset/setting.jpg')
# setting = customtkinter.CTkImage(light_image = Image.open("img_asset/setting.jpg"),
#                                  dark_image = Image.open("img_asset\invert_setting.jpg"),
#                                  size = (58, 58))

app.mainloop() 